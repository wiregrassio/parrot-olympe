#include <stdio.h>
#include <stdbool.h>
#include "freertos/FreeRTOS.h"
#include "freertos/event_groups.h"
#include "freertos/task.h"
#include "esp_adc/adc_oneshot.h"
#include "esp_wifi.h"
#include "esp_event.h"
#include "nvs_flash.h"
#include "esp_log.h"
#include "esp_http_client.h"
#include "esp_tls.h"
#include "mqtt_client.h"

/* ------------------------------------------------
Macros / Globals
---------------------------------------------------*/
// ADC
#define SAMPLE_CNT 32  //number of ADC samples for averaging
static const adc_channel_t adc_pins[] = {
    ADC_CHANNEL_0,
    ADC_CHANNEL_3,
    ADC_CHANNEL_6,
    ADC_CHANNEL_7,
    ADC_CHANNEL_4,
    ADC_CHANNEL_5
};
#define ADC_PINS_COUNT (sizeof(adc_pins) / sizeof(adc_pins[0]))
static adc_oneshot_unit_handle_t adc1_handle;

// WIFI
#define WIFI_SSID "SpectrumSetup-76"
#define WIFI_PASSWORD "cleanlion866"

//MQTT Global
#define MQTT_BROKER_URI "mqtt://elliotwillis.us.cumulocity.com"
#define MQTT_CLIENT_ID "esp_device"

//MQTT Bootstrap
#define BOOTSTRAP_USERNAME "management/devicebootstrap"
#define BOOTSTRAP_PASSWORD "Fhdt1bb1f"
#define BOOTSTRAP_SUB_TOPIC "s/dcr"
#define BOOTSTRAP_PUB_TOPIC "s/ucr"
// Last Message: 70,t525900418,device_esp_device,yiMj0Gjg*d

//MQTT Cycle
#define MQTT_USERNAME "t525900418/device_esp_device"
#define MQTT_PASSWORD "yiMj0Gjg*d"
#define MQTT_SUB_TOPIC "s/ds"
#define MQTT_ERROR_TOPIC "s/e"
#define MQTT_PUB_TOPIC "s/us"

bool need_to_bootstrap = false;

//Connection State
static EventGroupHandle_t connection_event_group;
const int WIFI_CONNECTED_BIT = BIT0;
const int BOOTSTRAP_CONNECTED_BIT = BIT1;
const int BOOTSTRAP_SUBSCRIBED_BIT = BIT2;
const int MQTT_CONNECTED_BIT = BIT3;
const int MQTT_SUBSCRIBED_BIT = BIT4;

static esp_mqtt_client_handle_t mqtt_client = NULL;

/* -------------------------------------------------
Misc Functions
---------------------------------------------------*/
int _get_rssi()
{
    wifi_ap_record_t ap_info;
    if (esp_wifi_sta_get_ap_info(&ap_info) == ESP_OK) {
        return ap_info.rssi;
    } else {
        ESP_LOGE("RSSI", "Failed to get AP info");
        return 0; // Return 0 or an appropriate error value if the RSSI cannot be retrieved
    }
}

void _publish_rssi()
{
    int rssi = _get_rssi();
    char rssi_str[10];
    snprintf(rssi_str, sizeof(rssi_str), "210,%d,,", rssi);
    esp_mqtt_client_publish(mqtt_client, MQTT_PUB_TOPIC, rssi_str, 0, 1, 0); // Replace "your/rssi/topic" with your actual topic
}

/* -------------------------------------------------
ADC
---------------------------------------------------*/
static void _init_adc(void)
{
    adc_oneshot_unit_init_cfg_t init_config = {
        .unit_id = ADC_UNIT_1,
    };
    adc_oneshot_new_unit(&init_config, &adc1_handle);

    adc_oneshot_chan_cfg_t config = {
        .bitwidth = ADC_BITWIDTH_10,
        .atten = ADC_ATTEN_DB_12,
    };

    for (int i = 0; i < ADC_PINS_COUNT; i++) {
        adc_oneshot_config_channel(adc1_handle, adc_pins[i], &config);
    }
}

static void _adc_sampling_task(void *pvParameters)
{
    while (1)
    {
        uint32_t adc_vals[ADC_PINS_COUNT] = {0};

        for (int j = 0; j < ADC_PINS_COUNT; ++j)
        {
            int adc_val = 0;
            for (int i = 0; i < SAMPLE_CNT; ++i)
            {
                adc_oneshot_read(adc1_handle, adc_pins[j], &adc_val);
                adc_vals[j] += adc_val;
            }
            adc_vals[j] /= SAMPLE_CNT;  // Average the ADC values
        }

        printf("ADC Values: ");
        for (int j = 0; j < ADC_PINS_COUNT; ++j)
        {
            printf("%lu ", adc_vals[j]);
        }
        printf("\n");

        vTaskDelay(pdMS_TO_TICKS(100));
    }
}

/* -------------------------------------------------
WIFI
---------------------------------------------------*/
static void _init_nvs(void)
{
    esp_err_t ret = nvs_flash_init();
    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND) {
        ESP_ERROR_CHECK(nvs_flash_erase());
        ret = nvs_flash_init();
    }
    ESP_ERROR_CHECK(ret);
}

static void _wifi_event_handler(void* arg, esp_event_base_t event_base, int32_t event_id, void* event_data)
{
    if (event_base == WIFI_EVENT && event_id == WIFI_EVENT_STA_START) {
        esp_wifi_connect();
    } else if (event_base == WIFI_EVENT && event_id == WIFI_EVENT_STA_DISCONNECTED) {
        esp_wifi_connect();
        xEventGroupClearBits(connection_event_group, WIFI_CONNECTED_BIT);
        ESP_LOGI("wifi_event_handler", "retry to connect to the AP");
    } else if (event_base == IP_EVENT && event_id == IP_EVENT_STA_GOT_IP) {
        xEventGroupSetBits(connection_event_group, WIFI_CONNECTED_BIT);
        ip_event_got_ip_t* event = (ip_event_got_ip_t*) event_data;
        ESP_LOGI("wifi_event_handler", "got ip:%s", ip4addr_ntoa(&event->ip_info.ip));
    }
}

static void _init_wifi_sta_mode(void)
{
    esp_netif_init();
    esp_event_loop_create_default();
    esp_netif_create_default_wifi_sta();

    wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();
    esp_wifi_init(&cfg);

    esp_event_handler_instance_t instance_any_id;
    esp_event_handler_instance_t instance_got_ip;
    esp_event_handler_instance_register(WIFI_EVENT, ESP_EVENT_ANY_ID, _wifi_event_handler, NULL, &instance_any_id);
    esp_event_handler_instance_register(IP_EVENT, IP_EVENT_STA_GOT_IP, _wifi_event_handler, NULL, &instance_got_ip);

    wifi_config_t wifi_config = {
        .sta = {
            .ssid = WIFI_SSID,
            .password = WIFI_PASSWORD,
            .threshold.authmode = WIFI_AUTH_WPA2_PSK,
        },
    };
    esp_wifi_set_mode(WIFI_MODE_STA);
    esp_wifi_set_config(ESP_IF_WIFI_STA, &wifi_config);
    esp_wifi_start();
}

/* -------------------------------------------------
Firmware
---------------------------------------------------*/
static void _firmware_event_handler(esp_http_client_event_t *evt)
{
    switch (evt->event_id) {
        case HTTP_EVENT_ERROR:
            ESP_LOGI("HTTP_EVENT", "HTTP_EVENT_ERROR");
            break;
        case HTTP_EVENT_ON_CONNECTED:
            ESP_LOGI("HTTP_EVENT", "HTTP_EVENT_ON_CONNECTED");
            break;
        case HTTP_EVENT_HEADER_SENT:
            ESP_LOGI("HTTP_EVENT", "HTTP_EVENT_HEADER_SENT");
            break;
        case HTTP_EVENT_REDIRECT:
            ESP_LOGI("HTTP_EVENT", "HTTP_EVENT_REDIRECT");
            break;
        case HTTP_EVENT_ON_HEADER:
            ESP_LOGI("HTTP_EVENT", "HTTP_EVENT_ON_HEADER, key=%s, value=%s", evt->header_key, evt->header_value);
            break;
        case HTTP_EVENT_ON_DATA:
            ESP_LOGI("HTTP_EVENT", "HTTP_EVENT_ON_DATA, len=%d", evt->data_len);
            if (!esp_http_client_is_chunked_response(evt->client)) {
                printf("%.*s", evt->data_len, (char*)evt->data);
            }
            esp_mqtt_client_publish(mqtt_client, MQTT_PUB_TOPIC, "501,c8y_Firmware", 0, 1, 0); // Confirm Firmware Received
            break;
        case HTTP_EVENT_ON_FINISH:
            ESP_LOGI("HTTP_EVENT", "HTTP_EVENT_ON_FINISH");
            break;
        case HTTP_EVENT_DISCONNECTED:
            ESP_LOGI("HTTP_EVENT", "HTTP_EVENT_DISCONNECTED");
            break;
    }
}

static void _get_firmware_task(void *pvParameters)
{
    const char *url = (const char *)pvParameters;

    // Perform the HTTP GET request
    esp_http_client_config_t config = {
        .url = url,
        .event_handler = _firmware_event_handler,
    };
    esp_http_client_handle_t client = esp_http_client_init(&config);

    esp_err_t err = esp_http_client_perform(client);

    if (err == ESP_OK) {
        ESP_LOGI("FIRMWARE", "Status = %d, content_length = %lld",
            esp_http_client_get_status_code(client),
            esp_http_client_get_content_length(client));
            ESP_LOGI("MQTT", "FIRMWARE UPDATE REQUEST - Complete");
            esp_mqtt_client_publish(mqtt_client, MQTT_PUB_TOPIC, "503,c8y_Firmware", 0, 1, 0); // Confirm Firmware Applied
    } else {
        ESP_LOGE("FIRMWARE", "Request Failed: %s", esp_err_to_name(err));
    }

    esp_http_client_cleanup(client);

    free((void *)url); // Free the allocated memory

    vTaskDelete(NULL);
}

/* -------------------------------------------------
MQTT
---------------------------------------------------*/
static void _bootstrap_event_handler(void *handler_args, esp_event_base_t base, int32_t event_id, void *event_data)
{
    esp_mqtt_event_handle_t event = event_data;
    switch (event_id) {
        case MQTT_EVENT_CONNECTED:
            ESP_LOGI("BOOTSTRAP", "CONNECTED");
            xEventGroupSetBits(connection_event_group, BOOTSTRAP_CONNECTED_BIT);
            break;
//        case MQTT_EVENT_DISCONNECTED:
//            ESP_LOGI("BOOTSTRAP", "DISCONNECTED");
//            xEventGroupClearBits(connection_event_group, BOOTSTRAP_CONNECTED_BIT);
//            break;
        case MQTT_EVENT_SUBSCRIBED:
            ESP_LOGI("BOOTSTRAP", "SUBSCRIBED");
            xEventGroupSetBits(connection_event_group, BOOTSTRAP_SUBSCRIBED_BIT);          
            break;
//        case MQTT_EVENT_UNSUBSCRIBED:
//            ESP_LOGI("BOOTSTRAP", "UNSUBSCRIBED");
//            xEventGroupClearBits(connection_event_group, BOOTSTRAP_SUBSCRIBED_BIT);
//            break;
        case MQTT_EVENT_PUBLISHED:
            ESP_LOGI("BOOTSTRAP", "PUBLISHED");
            break;
        case MQTT_EVENT_DATA:
            ESP_LOGI("BOOTSTRAP", "DATA");
            printf("%.*s\r\n", event->data_len, event->data);
            if (event->data_len != 0) {
                need_to_bootstrap = false;
            }
            break;
//        case MQTT_EVENT_ERROR:
//            ESP_LOGI("BOOTSTRAP", "ERROR: error_type=%d, error_code=%d", event->error_handle->error_type, event->error_handle->esp_tls_last_esp_err);
//            break;
        default:
//            ESP_LOGI("BOOTSTRAP", "Other event id:%d", event->event_id);
            break;
    }
}

static void _bootstrap_task(void *pvParameters)
{
    xEventGroupWaitBits(connection_event_group, WIFI_CONNECTED_BIT, pdFALSE, pdTRUE, portMAX_DELAY);

    esp_mqtt_client_config_t mqtt_cfg = {
        .broker.address.uri = MQTT_BROKER_URI,
        .credentials = {
            .client_id = MQTT_CLIENT_ID ,
            .username = BOOTSTRAP_USERNAME,
            .authentication.password = BOOTSTRAP_PASSWORD,
        },
    };

    mqtt_client = esp_mqtt_client_init(&mqtt_cfg);
    if (mqtt_client == NULL) {
        ESP_LOGE("MQTT", "Failed to initialize MQTT client");
        vTaskDelete(NULL);
    }

    esp_mqtt_client_register_event(mqtt_client, ESP_EVENT_ANY_ID, _bootstrap_event_handler, mqtt_client);
    esp_mqtt_client_start(mqtt_client);

    xEventGroupWaitBits(connection_event_group, BOOTSTRAP_CONNECTED_BIT, pdFALSE, pdTRUE, portMAX_DELAY);

    esp_mqtt_client_subscribe(mqtt_client, BOOTSTRAP_SUB_TOPIC, 0);

    xEventGroupWaitBits(connection_event_group, BOOTSTRAP_SUBSCRIBED_BIT, pdFALSE, pdTRUE, portMAX_DELAY);

    while (need_to_bootstrap)
    {
        esp_mqtt_client_publish(mqtt_client, BOOTSTRAP_PUB_TOPIC, "", 0, 1, 0);
        vTaskDelay(pdMS_TO_TICKS(1000)); 
    }
    ESP_LOGI("BOOTSTRAP", "Completed");

// cleanup
    esp_mqtt_client_unsubscribe(mqtt_client, MQTT_SUB_TOPIC);
    esp_mqtt_client_stop(mqtt_client);
    esp_mqtt_client_destroy(mqtt_client);
    mqtt_client = NULL;

    vTaskDelete(NULL);
}

static void _mqtt_event_handler(void *handler_args, esp_event_base_t base, int32_t event_id, void *event_data)
{
    esp_mqtt_event_handle_t event = event_data;
    switch (event_id) {
        case MQTT_EVENT_CONNECTED:
            ESP_LOGI("MQTT", "CONNECTED");
            xEventGroupSetBits(connection_event_group, MQTT_CONNECTED_BIT);
            break;
        case MQTT_EVENT_DISCONNECTED:
            ESP_LOGI("MQTT", "DISCONNECTED");
            xEventGroupClearBits(connection_event_group, MQTT_CONNECTED_BIT);
            break;
        case MQTT_EVENT_SUBSCRIBED:
            ESP_LOGI("MQTT", "MQTT_SUBSCRIBED");
            xEventGroupSetBits(connection_event_group, MQTT_SUBSCRIBED_BIT);          
            break;
        case MQTT_EVENT_UNSUBSCRIBED:
            ESP_LOGI("MQTT", "UNSUBSCRIBED");
            xEventGroupClearBits(connection_event_group, MQTT_SUBSCRIBED_BIT);
            break;
        case MQTT_EVENT_PUBLISHED:
//            ESP_LOGI("MQTT", "PUBLISHED");
            break;
        case MQTT_EVENT_DATA:
            if (event->data_len > 3 && strncmp(event->data, "515", 3) == 0) { //firmware update request
                printf("MESSAGE=%.*s\r\n", event->data_len, event->data);
                ESP_LOGI("MQTT", "FIRMWARE UPDATE REQUEST");
                const char *url_start = strstr(event->data, "https://");
                if (url_start != NULL) {
                    // Calculate the length of the URL
                    size_t url_length = event->data_len - (url_start - event->data);
                    char *url = malloc(url_length + 1);
                    if (url == NULL) {
                        ESP_LOGE("MQTT", "Failed to allocate memory for URL");
                        break;
                    }
                    strncpy(url, url_start, url_length);
                    url[url_length] = '\0'; // Ensure null-termination

                    printf("URL=%s\r\n", url);
                    if (xTaskCreate(_get_firmware_task, "TaskGetFirmware", 4096, url, 5, NULL) != pdPASS) {
                        ESP_LOGE("MQTT", "Failed to create task");
                        free(url);
                    }
                } else {
                    ESP_LOGE("MQTT", "URL not found in the data");
                }
            } else {
                ESP_LOGI("MQTT", "DATA");
                printf("MESSAGE=%.*s\r\n", event->data_len, event->data);
            }            
            break;
        case MQTT_EVENT_ERROR:
            ESP_LOGI("MQTT", "ERROR: error_type=%d, error_code=%d", event->error_handle->error_type, event->error_handle->esp_tls_last_esp_err);
            break;
        default:
            ESP_LOGI("MQTT", "Other event id:%d", event->event_id);
            break;
    }
}

static void _mqtt_connect_task(void *pvParameters)
{
    xEventGroupWaitBits(connection_event_group, WIFI_CONNECTED_BIT, pdFALSE, pdTRUE, portMAX_DELAY);

    esp_mqtt_client_config_t mqtt_cfg = {
        .broker.address.uri = MQTT_BROKER_URI,
        .credentials = {
            .client_id = MQTT_CLIENT_ID ,
            .username = MQTT_USERNAME,
            .authentication.password = MQTT_PASSWORD,
        },
    };

    mqtt_client = esp_mqtt_client_init(&mqtt_cfg);
    if (mqtt_client == NULL) {
        ESP_LOGE("MQTT", "Failed to initialize MQTT client");
        vTaskDelete(NULL);
    }

    esp_mqtt_client_register_event(mqtt_client, ESP_EVENT_ANY_ID, _mqtt_event_handler, mqtt_client);
    esp_mqtt_client_start(mqtt_client);

    xEventGroupWaitBits(connection_event_group, MQTT_CONNECTED_BIT, pdFALSE, pdTRUE, portMAX_DELAY); //wait for MQTT connected
    esp_mqtt_client_subscribe(mqtt_client, MQTT_SUB_TOPIC, 0);
    xEventGroupWaitBits(connection_event_group, MQTT_SUBSCRIBED_BIT, pdTRUE, pdTRUE, portMAX_DELAY); //wait for MQTT subscribed 1 (arg3 = pdTRUE resets the bit)
    esp_mqtt_client_subscribe(mqtt_client, MQTT_ERROR_TOPIC, 0);
    xEventGroupWaitBits(connection_event_group, MQTT_SUBSCRIBED_BIT, pdTRUE, pdTRUE, portMAX_DELAY); //wait for MQTT subscribed 2 (arg3 = pdTRUE resets the bit)

    char data[50];
    snprintf(data, sizeof(data), "100,%s,c8y_MQTTdevice", MQTT_CLIENT_ID);
    esp_mqtt_client_publish(mqtt_client, MQTT_PUB_TOPIC, data, 0, 1, 0); // Register Device
    esp_mqtt_client_publish(mqtt_client, MQTT_PUB_TOPIC, "114,c8y_Firmware,c8y_Restart", 0, 1, 0); // Enable Firmware Management / Restart
    esp_mqtt_client_publish(mqtt_client, MQTT_PUB_TOPIC, "115,EllioTech,1.0,", 0, 1, 0); // Specify Firmware

// --------------- Remove in Production ---------------
    esp_mqtt_client_publish(mqtt_client, MQTT_PUB_TOPIC, "501,c8y_Firmware", 0, 1, 0); // Reset Firmware Operation (Executing)
    esp_mqtt_client_publish(mqtt_client, MQTT_PUB_TOPIC, "503,c8y_Firmware", 0, 1, 0); // Reset Firmware Operation (Successful)
// ---------------------------------------------------

    vTaskDelete(NULL);
}

void app_main()
{
    connection_event_group = xEventGroupCreate();

    _init_nvs();
    _init_adc();
    _init_wifi_sta_mode();

    if (need_to_bootstrap) {
        xTaskCreate(_bootstrap_task, "TaskMQTTBootstrap", 4096, NULL, 5, NULL);
    } else {
        xTaskCreate(_mqtt_connect_task, "TaskMQTTConnect", 4096, NULL, 5, NULL);
    }

//    xTaskCreate(adc_sampling_task, "ADC Sampling Task", 2048, NULL, 5, NULL);

    while (1)
    {
        vTaskDelay(pdMS_TO_TICKS(5000));
        _publish_rssi();
    }
}
